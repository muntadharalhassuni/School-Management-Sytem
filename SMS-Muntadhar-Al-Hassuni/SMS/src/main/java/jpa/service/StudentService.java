/*  Requirement 4:

Create a StudentService which implements the respective DAOs

getAllStudents();
-This method reads the student table in your
database and returns the data as a List<Student>

getStudentByEmail();
–This method takes a Student’s email as a String and parses the student list for a Student with that email and returns a Student Object.

validateStudent();
–This method takes two parameters: the first one is the user email and the second one is the password from the user input. Return whether or not a student was found.


registerStudentToCourse()
-After a successful student validation, this method takes a Student’s email and a Course ID. It checks in the join table (i.e. Student_Course) generated by JPA to find if a Student with that Email is currently attending a Course with that ID.
If the Student is not attending that Course, register the student to that course; otherwise not.

getStudentCourses()
–This method takes a Student’s Email as a parameter and would find all the courses a student is registered.

* */
package jpa.service;
import jpa.dao.StudentDAO;
import jpa.entitymodels.Course;
import jpa.entitymodels.Student;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import java.util.ArrayList;
import java.util.List;

public class StudentService implements StudentDAO {
    private EntityManagerFactory mFactory;
    private EntityManager mgr;

    public void setUpDataBase(){
        mFactory = Persistence.createEntityManagerFactory("java");
        mgr = mFactory.createEntityManager();
    }
    public void closeDataBase(){
        mgr.close();
        mFactory.close();
    }

    @Override
    public List<Student> getAllStudents() {
        setUpDataBase();

        try{
            Query query = mgr.createQuery("select s from Student s");
            List<Student> studentList = query.getResultList();

            for(Student student : studentList){
                System.out.println(student);
            }

            return studentList;

        }catch (Exception e) {
            e.printStackTrace();
            return null;
        }finally {

            closeDataBase();

        }
    }



    @Override
    public Student getStudentByEmail(String sEmail) {


        setUpDataBase();

        try{
            Student student = mgr.find(Student.class, sEmail);

            return student;

        } catch (Exception e) {

            e.printStackTrace();

            return null;

        }finally {

            closeDataBase();

        }
    }


    @Override
    public boolean validateStudent(String sEmail, String password) {

        setUpDataBase();

        Query query = mgr.createQuery("SELECT e from Student e where e.sEmail =: email and e.sPass = :password")
                .setParameter("email", sEmail)
                .setParameter("password", password);

        List list = query.getResultList();

        closeDataBase();


            return !list.isEmpty();


    }


    public void registerStudentToCourse(String sEmail, int cId) {

        setUpDataBase();

        mgr.getTransaction().begin();
        try {
            Query query = mgr.createNativeQuery("SELECT * FROM StudentCourse WHERE email = ? AND id = ?");
            query.setParameter(1,sEmail);
            query.setParameter(2,cId);
            List<Course> courses = (List<Course>) query.getResultList();


            List studentCourseList = query.getResultList();

            if (studentCourseList.isEmpty()) {
                Query registerCourse = mgr.createNativeQuery("INSERT INTO StudentCourse (email, id) VALUES (?,?)");
                registerCourse.setParameter(1,sEmail);
                registerCourse.setParameter(2,cId);
                registerCourse.executeUpdate();
                mgr.getTransaction().commit();

            }

        } catch (Exception e) {

            e.printStackTrace();

        }finally {

            closeDataBase();



        }

    }



    @Override
    public List<Course> getStudentCourses(String sEmail) {

        setUpDataBase();

            List<Course> allCourses =  new ArrayList<>();

            Query q = mgr.createNativeQuery("Select course.* FROM course  " +
                    "JOIN StudentCourse ON course.id=StudentCourse.id " +
                    "JOIN student ON student.email=StudentCourse.email " +
                    "WHERE student.email = ?1 " +
                    "ORDER BY 1 ASC",Course.class);
            q.setParameter(1,sEmail);

            allCourses =  q.getResultList();

        closeDataBase();


            return allCourses;

        }




    }







